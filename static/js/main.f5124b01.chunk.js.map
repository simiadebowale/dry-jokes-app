{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","this","props","votes","className","onClick","upVotes","style","borderColor","getColor","downVotes","text","getEmoji","Component","JokeList","state","jokes","JSON","parse","window","localStorage","getItem","loading","seenJokes","Set","map","j","handleClick","bind","length","getJokes","numJokes","axios","get","headers","Accept","res","newJoke","data","joke","has","console","log","push","id","uuid","setState","st","setItem","stringify","alert","delta","sort","a","b","src","key","handleVote","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f5124b01.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Joke.css';\r\n\r\n\r\nclass Joke extends Component {\r\n\r\n    getColor() {\r\n        if(this.props.votes >= 15){\r\n            return \"#4CAF50\";\r\n        } else if (this.props.votes >= 12){\r\n            return \"#8BC34A\";\r\n        } else if (this.props.votes >= 9){\r\n            return \"#CDDC39\";\r\n        } else if (this.props.votes >= 6){\r\n            return \"#FFEB38\";\r\n        } else if (this.props.votes >= 3){\r\n            return \"#FFC107\";\r\n        } else if (this.props.votes >= 0){\r\n            return \"#FF9800\";\r\n        } else{\r\n            return \"#f44336\";\r\n        }\r\n    }\r\n\r\n    getEmoji(){\r\n        if(this.props.votes >= 15){\r\n            return \"em em-rolling_on_the_floor_laughing\";\r\n        } else if (this.props.votes >= 12){\r\n            return \"em em-laughing\";\r\n        } else if (this.props.votes >= 9){\r\n            return \"em em-smiley\";\r\n        } else if (this.props.votes >= 6){\r\n            return \"em em-slightly_smiling_face\";\r\n        } else if (this.props.votes >= 3){\r\n            return \"em em-neutral_face\";\r\n        } else if (this.props.votes >= 0){\r\n            return \"em em-confused\";\r\n        } else{\r\n            return \"em em-angry\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div className=\"Joke\">\r\n            <div className=\"Joke-buttons\">\r\n            <i className=\"fas fa-arrow-up\" onClick={this.props.upVotes} />\r\n            <span className=\"Joke-votes\" style={{ borderColor: this.getColor() }}>\r\n                {this.props.votes}\r\n            </span>\r\n            <i className=\"fas fa-arrow-down\" onClick={this.props.downVotes} />\r\n            </div>\r\n            <div className=\"Joke-text\">{this.props.text}</div>\r\n            <div className=\"Joke-smiley\">\r\n                <i className={this.getEmoji()} />\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Joke;","import React, { Component } from 'react';\r\nimport Joke from './Joke';\r\nimport axios from 'axios';\r\nimport uuid from 'uuid/dist/v4';\r\nimport './JokeList.css';\r\n\r\n\r\nclass JokeList extends Component {\r\n    static defaultProps = {\r\n        numJokes: 10\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\r\n            loading: false\r\n        };\r\n        this.seenJokes = new Set(this.state.jokes.map(j => j.text));\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\ncomponentDidMount(){\r\n    if(this.state.jokes.length === 0){\r\n        this.getJokes();\r\n    }\r\n}\r\n\r\nasync getJokes() {\r\n    try {\r\n    let jokes = [];\r\n    while(jokes.length < this.props.numJokes){\r\n    let res = await axios.get(\"https://icanhazdadjoke.com/\", {headers: {Accept: \"application/json\"}\r\n    });\r\n    let newJoke = res.data.joke;\r\n    if(!this.seenJokes.has(newJoke)) {\r\n    jokes.push({id: uuid(), text: newJoke, votes: 0});\r\n    } else {\r\n        console.log(newJoke);\r\n    }\r\n    }\r\n     this.setState(st => ({\r\n         loading: false,\r\n        jokes: [...st.jokes, ...jokes]\r\n     }),\r\n     () => \r\n     window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n     );\r\n    } catch(e) {\r\n        alert(e);\r\n        this.setState({ loading: false});\r\n    }\r\n}\r\n\r\nhandleVote(id, delta){\r\n    this.setState(st => ({\r\n         jokes: st.jokes.map(j =>\r\n            j.id === id ? {...j, votes: j.votes + delta }: j\r\n            )\r\n        }),\r\n        () => window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n    )\r\n}\r\nhandleClick() {\r\n    this.setState({ loading: true }, this.getJokes);\r\n}\r\nrender(){\r\n    if(this.state.loading) {\r\n        return (\r\n            <div className=\"JokeList-spinner\">\r\n                <i className=\"far fa-8x fa-laugh fa-spin\" />\r\n                <h1 className=\"JokeList-title\">Loading...</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let jokes = this.state.jokes.sort((a,b) => b.votes - a.votes);\r\n    return (\r\n        <div className=\"JokeList\">\r\n        <div className=\"JokeList-sidebar\">\r\n        <h1 className=\"JokeList-title\">\r\n            <span>DRY</span> Jokes\r\n        </h1>\r\n        <img src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\" />\r\n        <button className=\"JokeList-getmore\" onClick={this.handleClick}>Fetch Jokes</button>\r\n        </div>\r\n        \r\n        <div className=\"JokeList-jokes\">\r\n            {jokes.map(j => (\r\n            <Joke key={j.id}\r\n            text={j.text} \r\n            votes={j.votes} \r\n            upVotes={() => this.handleVote(j.id, 1)}\r\n            downVotes={() => this.handleVote(j.id, -1)}/>\r\n            ))}\r\n        </div>\r\n        </div>\r\n    )\r\n    \r\n    }\r\n}\r\n\r\nexport default JokeList;","import React from 'react';\nimport JokeList from './JokeList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}